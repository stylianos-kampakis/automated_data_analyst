package analyst;
 
import java.util.ArrayList;
import com.dataframe.DataFrame;
import com.dataframe.DataFrameIndexException;
import com.dataframe.DataFrame.*;
import com.dataframe.DataPointType;
import com.factengine.*;
import com.factengine.commanders.*;
import com.factengine.results.*;
import com.factengine.analysisdescriptors.*;
import com.factengine.factmodels.*;
import com.factengine.datasetdescriptors.*;
import com.datautils.*;
import com.analysisInterface.results.*;
import com.factengine.performancedescriptors.*;
 
 
 
rule "Clean up index column. Detects a string column where all the elements are unique."
salience 1000
	when
		$col: FactColumn()
		$df: DataFrame()
		$colCommander: ColumnRemovalCommander()
		eval($df.getColumnType($col.getColumn())==DataPointType.STRING)
		eval($df.getColumnDescription($col.getColumn()).getFactors().size()==$df.getNumberRows())
		$list : Results()
	then
		$colCommander.addColumn($col.getColumn());
		$list.add(new ResultStatement("Removing column "+$col.getColumn()+"because the number of factors is equal to the number of rows. This column must be an index column.",ResultTags.DATA_CLEANING));	    		
end

rule "choose columns to remove because of missing values"
salience 950
	when
		$col: FactColumn()
		$df: DataFrame()
		$colCommander: ColumnRemovalCommander()
		eval($df.getNumMissingValuesForColumn($col.getColumn())/$df.getNumberRows()>0.1)
		$list : Results()
	then
		$colCommander.addColumn($col.getColumn());
		$list.add(new ResultStatement("Removing column "+$col.getColumn()+"because of large percentage of missing values.",ResultTags.DATA_CLEANING));	    		
end

rule "detect low variance columns"
salience 950
	when	
		$col: FactColumn()
		$df: DataFrame()
		$colCommander: ColumnRemovalCommander()
		eval($df.getVariance($col.getColumn())<0.1)
		$list : Results()
	then
	  	$colCommander.addColumn($col.getColumn());
		$list.add(new ResultStatement("Removing column "+$col.getColumn()+"because of small variance",ResultTags.DATA_CLEANING));	    		
end

/*
rule "Detect high correlation columns. One of them must be redundant."
salience 930
	when	
		$col1: FactColumn()
		$col2: FactColumn()
		$df: DataFrame()
		$list : Results()
		$colCommander: ColumnRemovalCommander()
		eval($col1.getColumn()!=$col2.getColumn())
		//columns get type, both are numerical
		eval(DataUtils.Correlation($col1.getColumn(),$col2.getColumn())>0.95)		
	then
	  	$colCommander.addColumn($col1.getColumn());
		$list.add(new ResultStatement("Removing column "+$col1.getColumn()+"because of high correlation with "+$col2.getColumn(),ResultTags.DATA_CLEANING));	    		
end
*/

rule "removal of columns"
salience 900
	no-loop
	when
		$df: DataFrame()
		$colCommander: ColumnRemovalCommander()
		exists Action()
	then
		$colCommander.removeColumns($df);
end



rule "choose rows to be removed"
salience 800
	when	
		$row : FactRow()
		$df: DataFrame()
		eval($df.getNumMissingValuesForRow($row.getRow())>1)
		$rowRemovalCommander : RowRemovalCommander()
		$list: Results()
	then
	    $rowRemovalCommander.addRow($row.getRow());
	   	$list.add(new ResultStatement("Removing row"+$row.getRow()+"because of large percentage of missing values.",ResultTags.DATA_CLEANING));	    			      	
end 



rule "removal of rows"
salience 700
	no-loop
	when	
		$df: DataFrame()
		$rowRemovalCommander : RowRemovalCommander()
		exists Action()
	then
	    $rowRemovalCommander.removeRows($df);	
end


rule "choose columns to be imputed"
salience 600
	when	 
		$col : FactColumn()
		$df: DataFrame()
		eval($df.getNumMissingValuesForColumn($col.getColumn())>0)
		eval($df.getNumMissingValuesForColumn($col.getColumn())<2)
		$impCommander : ImputationCommander()
		$list : Results()
	then
	    $impCommander.addRow($col.getColumn());
	   	$list.add(new ResultStatement("Imputing row "+$col.getColumn()+" because the number of missing values was within the prespecified range.",ResultTags.DATA_CLEANING));	    
end


rule "impute columns"
salience 500
	no-loop
	when
		$df: DataFrame()
		$impCommander : ImputationCommander()
		exists Action()
	then
		$impCommander.impute($df);
end


rule "clean up names"
salience 400
	no-loop
	when	
		
	then
	  	
end


rule "detect outliers"
salience 300
	no-loop
	when	
	
	then
	  	
end



rule "remove outliers"
salience 200
	no-loop
	when	
	
	then
	  	
end

